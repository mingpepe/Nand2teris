// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static bool color;
    static Array arr;
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        let arr = Array.new(16);
        let arr[0] = 1;
        let arr[1] = 2;
        let arr[2] = 4;
        let arr[3] = 8;
        let arr[4] = 16;
        let arr[5] = 32;
        let arr[6] = 64;
        let arr[7] = 128;
        let arr[8] = 256;
        let arr[9] = 512;
        let arr[10] = 1024;
        let arr[11] = 2048;
        let arr[12] = 4096;
        let arr[13] = 8192;
        let arr[14] = 16384;
        let arr[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;

        let address = (y * (512 / 16)) + (x / 16);
        let mask = arr[x & 15];

        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, diff;
        var int a, b;
        var int i;

        let i = 0;
        if (x1 = x2)
        {
            if (y1 < y2) {
                while (i < Math.abs(y1 - y2)) {
                    do Screen.drawPixel(x1, y1 + i);
                    let i = i + 1;
                }
            } else {
                while (i < Math.abs(y1 - y2)) {
                    do Screen.drawPixel(x1, y2 + i);
                    let i = i + 1;
                }
            }
            return;
        }

        if (y1 = y2) {
            if (x1 < x2) {
                while (i < Math.abs(x1 - x2)) {
                    do Screen.drawPixel(x1 + i, y1);
                    let i = i + 1;
                }
            } else {
                while (i < Math.abs(x1 - x2)) {
                    do Screen.drawPixel(x2 + i , y1);
                    let i = i + 1;
                }
            }
            return;
        }

        if (x1 > x2) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        // Only support north east & south east direction
        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);
        let diff = 0;
        let a = 0;
        let b = 0;
        if ((y1 < y2)) {
            while ((a < dx) & (b < dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            while ((a < dx) & (b < dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while ((y1 < y2) | (y1 = y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, tmp;
        let i = -r;
        while (i < r) {
            let tmp = Math.sqrt((r * r) - (i * i));
            do Screen.drawLine(x - tmp, y + i, x + tmp, y + i);
            let i = i + 1;
        }
        return;
    }
}
